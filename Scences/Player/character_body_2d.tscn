[gd_scene load_steps=4 format=3 uid="uid://b6sju3km700fs"]

[ext_resource type="Texture2D" uid="uid://dcdmqv3ls3do0" path="res://icon.svg" id="1_f50pn"]

[sub_resource type="GDScript" id="GDScript_a2e54"]
script/source = "extends CharacterBody2D

@export_category(\"Movement Parameters\")
@export var max_speed: float = 300.0
@export var acceleration: float = 2000.0
@export var friction: float = 1000.0
@export var air_friction: float = 200.0

@export_category(\"Jump Parameters\")
@export var jump_force: float = 600.0
@export var gravity: float = 1200.0
@export var fall_gravity_multiplier: float = 1.5
@export var max_jumps: int = 2
@export var jump_buffer_time: float = 0.15
@export var coyote_time: float = 0.15
@onready var coyote_timer: Timer = $coyote_timer

# Internal variables
var current_jumps: int = 0
var jump_buffer_timer: float = 0.0
var was_on_floor: bool = false

func _ready():
	# Initialization
	pass

func _physics_process(delta):
	apply_gravity(delta)
	handle_jump_buffer(delta)
	handle_coyote_time(delta)
	handle_movement(delta)
	handle_jump()
	
	# Update character state
	move_and_slide()
	update_jump_counter()

func apply_gravity(delta):
	# Apply more gravity when falling for better feel
	if not is_on_floor() and velocity.y > 0:
		velocity.y += gravity * fall_gravity_multiplier * delta
	else:
		velocity.y += gravity * delta

func handle_movement(delta):
	# Get horizontal input
	var direction = Input.get_axis(\"ui_left\", \"ui_right\")
	
	if direction != 0:
		# Apply acceleration
		velocity.x += direction * acceleration * delta
		velocity.x = clamp(velocity.x, -max_speed, max_speed)
	else:
		# Apply friction based on whether character is on floor or in air
		var friction_to_use = friction if is_on_floor() else air_friction
		velocity.x = move_toward(velocity.x, 0, friction_to_use * delta)

func handle_jump():
	if jump_buffer_timer > 0:
		if is_on_floor() or coyote_timer.time_left > 0 or current_jumps < max_jumps:
			velocity.y = -jump_force
			jump_buffer_timer = 0
			current_jumps += 1
			
			# Reset coyote timer if jumping during coyote time


func update_jump_counter():
	# Reset jump counter when touching the ground
	if is_on_floor():
		current_jumps = 0
	
	# Track floor state for coyote time
	if is_on_floor() != was_on_floor:
		was_on_floor = is_on_floor()
		if !is_on_floor():
			coyote_timer.start()

func handle_jump_buffer(delta):
	# Decrease jump buffer timer
	if jump_buffer_timer > 0:
		jump_buffer_timer -= delta
	
	# Set jump buffer when jump is pressed
	if Input.is_action_just_pressed(\"ui_accept\"):
		jump_buffer_timer = jump_buffer_time

func handle_coyote_time(delta):
	# Decrease coyote timer
	if coyote_timer.time_left > 0:
		coyote_timer -= delta
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_ij6vw"]
size = Vector2(134, 134)

[node name="CharacterBody2D" type="CharacterBody2D"]
script = SubResource("GDScript_a2e54")

[node name="Sprite2D" type="Sprite2D" parent="."]
texture = ExtResource("1_f50pn")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_ij6vw")

[node name="coyote_timer" type="Timer" parent="."]
wait_time = 0.2
